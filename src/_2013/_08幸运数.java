package _2013;

import java.util.Scanner;

// 幸运数

/*
标题∶幸运数
幸运数是波兰数学家乌拉姆命名的。它采用与生成素数类似的“筛法"生成。
首先从1开始写出自然数1,2,3,4,5,6,. . . .
1就是第一个幸运数。
我们从2这个数开始。把所有序号能被2整除的项删除，变为:
1 _3_ 5 _7 _ 9 ....
把它们缩紧，重新记序，为:
1 357 9
..。这时，3为第2个幸运数，然后把所有能被3整除的序号位置的数删去。
注意，是序号位置
不是那公数本身能否被3整除!!删除的应该是5，11，17， ...
此时7为第3个幸运数，然后再删去序号位置能被7整除的(19,39,. . .)
最后剩下的序列类似:
1，3，7，9，13，15，21，25，31，33，37，43，49，51，63，67，69，73，75，79，...
本题要求:
输入两个正整数m n，用空格分开(m < n < 1000*1000)程序输出位于m和n之间的幸运数的个数(不包含m和n)。
例如:
用户输入∶1 20程序输出∶5
例如:用户输入:30 69程序输出:8
资源约定:
峰值内存消耗（含虚拟机〉<64MCPU消耗< 2000ms

请严格按要求输出，不要画蛇添足地打印类似:“请您输入...”的多余内容。
所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意:不要使用package语句。不要使用jdk1.6及以上版本的特性。注意:主类的名字必须是:Main，否则按无效代码处理。
*/
public class _08幸运数 {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int m = scanner.nextInt();
		int n = scanner.nextInt();
		scanner.close();
		int[] a = new int[n / 2]; // 存储数据的数组
		for (int i = 0; i < n / 2; i++) {
			a[i] = 2 * i + 1;
		}
		// 已经把2的倍数（位置）删除了
		int p = 0; // 往前移动的坑位
		for (int i = 0; i < n / 2; i++) {
			if ((i + 1) % 3 != 0) {
				a[i - p] = a[i];
			} else {
				p++;
			}
		}
		for (int i = a.length - 1; i > a.length - p; i--) {
			a[i] = 0;
		}

		p = 0; // 往前移动的坑位,接下来，把7的位置给删除
		for (int i = 0; i < n / 2; i++) {
			if ((i + 1) % 7 != 0) {
				a[i - p] = a[i];
			} else {
				p++;
			}
		}
		for (int i = a.length - 1; i > a.length - p; i--) {
			a[i] = 0;
		}
		for (int i = 0; i < a.length - p; i++) {
			if (a[i] > m) {
				System.out.println(a[i]);
			}
		}
	}

}
